{"ast":null,"code":"var _jsxFileName = \"/home/kirsi/Desktop/projects/Fat-Tracker/frontend/src/context/auth.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react'; //import { Navigate } from 'react-router-dom'\n\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/React.createContext();\n\nfunction AuthProviderWrapper(props) {\n  _s();\n\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  const [user, setUser] = useState(null);\n  const [isLoading, setIsLoading] = useState(true); //const navigate = Navigate()\n\n  const loginUser = token => {\n    localStorage.setItem('authToken', token);\n    verifyStoredToken();\n  };\n\n  const logoutUser = () => {\n    localStorage.removeItem('authToken');\n    setIsLoggedIn(false);\n    setUser(null); //navigate('/')\n  };\n\n  const verifyStoredToken = () => {\n    // check local storage for an auth token\n    const storedToken = localStorage.getItem('authToken');\n\n    if (storedToken) {\n      axios.get('api/auth/verify', {\n        headers: {\n          Authorization: `Bearer ${storedToken}`\n        }\n      }).then(response => {\n        console.log(response);\n        const user = response.data;\n        setUser(user);\n        setIsLoggedIn(true);\n        setIsLoading(false);\n      }).catch(err => {\n        // the token is invalid\n        setIsLoggedIn(false);\n        setUser(null);\n        setIsLoading(false);\n      });\n    } else {\n      // token is not available\n      setIsLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    verifyStoredToken();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      isLoggedIn,\n      user,\n      isLoading,\n      loginUser,\n      logoutUser\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 5\n  }, this);\n}\n\n_s(AuthProviderWrapper, \"bpgnJYK3jh2e0h7owtNWjkl0hQI=\");\n\n_c = AuthProviderWrapper;\nexport { AuthProviderWrapper, AuthContext };\n\nvar _c;\n\n$RefreshReg$(_c, \"AuthProviderWrapper\");","map":{"version":3,"sources":["/home/kirsi/Desktop/projects/Fat-Tracker/frontend/src/context/auth.js"],"names":["React","useState","useEffect","axios","AuthContext","createContext","AuthProviderWrapper","props","isLoggedIn","setIsLoggedIn","user","setUser","isLoading","setIsLoading","loginUser","token","localStorage","setItem","verifyStoredToken","logoutUser","removeItem","storedToken","getItem","get","headers","Authorization","then","response","console","log","data","catch","err","children"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C,C,CACA;;AAEA,OAAOC,KAAP,MAAkB,OAAlB;;AAEA,MAAMC,WAAW,gBAAGJ,KAAK,CAACK,aAAN,EAApB;;AAEA,SAASC,mBAAT,CAA6BC,KAA7B,EAAoC;AAAA;;AAClC,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BR,QAAQ,CAAC,KAAD,CAA5C;AACA,QAAM,CAACS,IAAD,EAAOC,OAAP,IAAkBV,QAAQ,CAAC,IAAD,CAAhC;AACA,QAAM,CAACW,SAAD,EAAYC,YAAZ,IAA4BZ,QAAQ,CAAC,IAAD,CAA1C,CAHkC,CAKlC;;AAEA,QAAMa,SAAS,GAAIC,KAAD,IAAW;AAC3BC,IAAAA,YAAY,CAACC,OAAb,CAAqB,WAArB,EAAkCF,KAAlC;AACAG,IAAAA,iBAAiB;AAClB,GAHD;;AAKA,QAAMC,UAAU,GAAG,MAAM;AACvBH,IAAAA,YAAY,CAACI,UAAb,CAAwB,WAAxB;AACAX,IAAAA,aAAa,CAAC,KAAD,CAAb;AACAE,IAAAA,OAAO,CAAC,IAAD,CAAP,CAHuB,CAIvB;AACD,GALD;;AAOA,QAAMO,iBAAiB,GAAG,MAAM;AAC9B;AACA,UAAMG,WAAW,GAAGL,YAAY,CAACM,OAAb,CAAqB,WAArB,CAApB;;AACA,QAAID,WAAJ,EAAiB;AACflB,MAAAA,KAAK,CACFoB,GADH,CACO,iBADP,EAC0B;AACtBC,QAAAA,OAAO,EAAE;AAAEC,UAAAA,aAAa,EAAG,UAASJ,WAAY;AAAvC;AADa,OAD1B,EAIGK,IAJH,CAISC,QAAD,IAAc;AAClBC,QAAAA,OAAO,CAACC,GAAR,CAAYF,QAAZ;AACA,cAAMjB,IAAI,GAAGiB,QAAQ,CAACG,IAAtB;AACAnB,QAAAA,OAAO,CAACD,IAAD,CAAP;AACAD,QAAAA,aAAa,CAAC,IAAD,CAAb;AACAI,QAAAA,YAAY,CAAC,KAAD,CAAZ;AACD,OAVH,EAWGkB,KAXH,CAWUC,GAAD,IAAS;AACd;AACAvB,QAAAA,aAAa,CAAC,KAAD,CAAb;AACAE,QAAAA,OAAO,CAAC,IAAD,CAAP;AACAE,QAAAA,YAAY,CAAC,KAAD,CAAZ;AACD,OAhBH;AAiBD,KAlBD,MAkBO;AACL;AACAA,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACD;AACF,GAzBD;;AA2BAX,EAAAA,SAAS,CAAC,MAAM;AACdgB,IAAAA,iBAAiB;AAClB,GAFQ,EAEN,EAFM,CAAT;AAIA,sBACE,QAAC,WAAD,CAAa,QAAb;AACE,IAAA,KAAK,EAAE;AACLV,MAAAA,UADK;AAELE,MAAAA,IAFK;AAGLE,MAAAA,SAHK;AAILE,MAAAA,SAJK;AAKLK,MAAAA;AALK,KADT;AAAA,cASGZ,KAAK,CAAC0B;AATT;AAAA;AAAA;AAAA;AAAA,UADF;AAaD;;GA/DQ3B,mB;;KAAAA,mB;AAiET,SAASA,mBAAT,EAA8BF,WAA9B","sourcesContent":["import React, { useState, useEffect } from 'react'\n//import { Navigate } from 'react-router-dom'\n\nimport axios from 'axios'\n\nconst AuthContext = React.createContext()\n\nfunction AuthProviderWrapper(props) {\n  const [isLoggedIn, setIsLoggedIn] = useState(false)\n  const [user, setUser] = useState(null)\n  const [isLoading, setIsLoading] = useState(true)\n\n  //const navigate = Navigate()\n\n  const loginUser = (token) => {\n    localStorage.setItem('authToken', token)\n    verifyStoredToken()\n  }\n\n  const logoutUser = () => {\n    localStorage.removeItem('authToken')\n    setIsLoggedIn(false)\n    setUser(null)\n    //navigate('/')\n  }\n\n  const verifyStoredToken = () => {\n    // check local storage for an auth token\n    const storedToken = localStorage.getItem('authToken')\n    if (storedToken) {\n      axios\n        .get('api/auth/verify', {\n          headers: { Authorization: `Bearer ${storedToken}` },\n        })\n        .then((response) => {\n          console.log(response)\n          const user = response.data\n          setUser(user)\n          setIsLoggedIn(true)\n          setIsLoading(false)\n        })\n        .catch((err) => {\n          // the token is invalid\n          setIsLoggedIn(false)\n          setUser(null)\n          setIsLoading(false)\n        })\n    } else {\n      // token is not available\n      setIsLoading(false)\n    }\n  }\n\n  useEffect(() => {\n    verifyStoredToken()\n  }, [])\n\n  return (\n    <AuthContext.Provider\n      value={{\n        isLoggedIn,\n        user,\n        isLoading,\n        loginUser,\n        logoutUser,\n      }}\n    >\n      {props.children}\n    </AuthContext.Provider>\n  )\n}\n\nexport { AuthProviderWrapper, AuthContext }\n"]},"metadata":{},"sourceType":"module"}